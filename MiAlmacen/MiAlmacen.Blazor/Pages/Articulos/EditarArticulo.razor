@page "/articulos/editar/{idArticulo:int}"
@inject NavigationManager NavigationManager
@inject ArticuloService ArticuloService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Editar producto</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver al listado
        </button>
    </div>
</div>

<FormArticulo articulo="articulo" OnValidSubmit="@EditarProd" TextBotonSubmit="Guardar cambios" OcultaAlta=false />

@code {
    public ArticuloModel articulo = new ArticuloModel();
    [Parameter] public int idArticulo { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            articulo = await ArticuloService.GetUn(idArticulo);    
        }
    }

    async Task EditarProd()
    {
        var respuesta = await ArticuloService.Editar(articulo);

        if (respuesta != null)
        {
            NavigationManager.NavigateTo("/articulos");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El producto {respuesta.Nombre} actualizado con éxito!", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"No se pudo actualizar el producto.", "error");
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/articulos");
    }
}