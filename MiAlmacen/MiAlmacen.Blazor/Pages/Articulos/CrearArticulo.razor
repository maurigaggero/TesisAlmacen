@page "/articulos/crear"
@inject NavigationManager NavigationManager
@inject ArticuloService ArticuloService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Nuevo producto</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver al listado
        </button>
    </div>
</div>

<div class="card m-1">
    <div class="card-body">
        <FormArticulo articulo="@articulo" TextBotonSubmit="Crear producto" OnValidSubmit="@CrearProd" OcultaAlta=true />
    </div>
</div>

@code {
    public ArticuloModel articulo = new ArticuloModel();

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    async Task CrearProd()
    {
        var respuesta = await ArticuloService.Alta(articulo);

        if (respuesta.IsSuccessStatusCode)
        {
            var content = await respuesta.Content.ReadAsStringAsync();
            var objDeserealizado = JsonConvert.DeserializeObject<ArticuloModel>(content);
            NavigationManager.NavigateTo("/articulos");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El producto {objDeserealizado.Nombre} fue creado", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo crear producto.", "error");
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/articulos");
    }
}
