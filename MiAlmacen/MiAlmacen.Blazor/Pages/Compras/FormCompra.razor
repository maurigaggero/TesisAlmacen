@inject NavigationManager NavigationManager
@inject CompraService CompraService
@inject ArticuloService ArticuloService
@inject ProveedorService ProveedorService
@inject UsuarioService UsuarioService
@inject FormasPagoService FormasPagoService
@inject IJSRuntime JS


@if (!string.IsNullOrEmpty(errores))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" id="validaciones">
        <b> Error! </b> @errores
    </div>
}

<div id="header" class="form-row">
    <div class="form-group col-md-4">
        <label>Fecha</label>
        <input type="date" @bind="@compra.Fecha" class="form-control" />
    </div>

    <div class="form-group col-md-4">
        <label>Número Recibo</label>
        <input type="number" @bind="@compra.NroRecibo" class="form-control" />
    </div>

    <div id="buscador-proveedores" class="form-group col-md-4">
        <label>Proveedor</label>
        <BlazoredTypeahead SearchMethod="BuscarProveedores" @bind-Value="proveedorSeleccionado" placeholder="Seleccione proveedor" class="form-control">
            <SelectedTemplate>@context.Nombre</SelectedTemplate>
            <ResultTemplate>@context.Nombre | @context.CUIL</ResultTemplate>
        </BlazoredTypeahead>
    </div>
</div>

<hr />

<div class="mb-1" id="detalle">
    <div class="form-row p-2">
        <div id="buscador-articulos" class="form-group col-md-4">
            <label>Producto</label>
            <BlazoredTypeahead SearchMethod="BuscarArticulos" @bind-Value="articuloSeleccionado" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Seleccione producto" class="form-control">
                <SelectedTemplate>@context.Nombre</SelectedTemplate>
                <ResultTemplate>@context.Nombre | @context.Codigo_Art | @context.Stock_Act</ResultTemplate>
            </BlazoredTypeahead>
        </div>

        <div class="form-group col-md-2">
            <label>Cantidad</label>
            <input type="number" @bind="@cantidad" class="form-control" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Ingrese cantidad" />
        </div>

        <div class="form-group col-md-2">
            <label>Precio Mayorista</label>
            <input type="number" @bind="precioMayor" class="form-control" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Ingrese precio" data-toggle="tooltip" data-placement="bottom" title="Precio que pagó por producto al proveedor" />
        </div>

        <div class="form-group col-md-2">
            <label>Precio Unitario</label>
            <input type="number" @bind="precioUnit" class="form-control" placeholder="Ingrese precio" data-toggle="tooltip" data-placement="bottom" title="Precio al que venderá el producto" />
        </div>

        <div class="form-group col-md-2">
            <label>SubTotal</label>
            <input type="number" @bind="subtotal" class="form-control" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Subtotal" readonly="readonly" />
        </div>
    </div>


    @if (compra.Detalle.Count == 0)
    {
        <div class="row">
            <div class="col-md-9">
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <b> No hay productos cargados en la compra,</b> agregue un nuevo detalle.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>

            <div class="col-md-3">
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-success" @onclick="AgregarDetalle">
                        <i class="oi oi-plus"></i> Agregar Detalle
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-success" @onclick="AgregarDetalle">
                <i class="oi oi-plus"></i> Agregar Detalle
            </button>
        </div>
    }
</div>


@if (compra.Detalle.Count > 0)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th>Articulo</th>
                <th>Precio Mayorista</th>
                <th>Precio Unitario</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{int contador = 1;}
            @foreach (var item in compra.Detalle)
            {
                <tr>
                    <td>@contador</td>
                    <td>@item.Articulo.Nombre</td>
                    <td>$@item.Precio_Mayor</td>
                    <td>$@item.Precio_Unit</td>
                    <td>@item.Cantidad</td>
                    <td>$@item.SubTotal</td>
                    <td><button type="button" class="btn btn-danger btn-sm" @onclick="() => compra.Detalle.Remove(item)"><i class="oi oi-trash"></i></button></td>
                </tr>
                contador++;
            }
        </tbody>
    </table>
}


<div class="d-flex justify-content-end py-2">
    <h4><b>TOTAL $@CalcularTotal()</b></h4>
</div>

<button type="submit" class="btn btn-block btn-success" @onclick="LevantaModal">
    <i class="oi oi-check"></i> Finalizar Compra
</button>

<!-- Modal Forma Pago -->
<div class="modal fade" id="modalFinalizaCompra" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title">Ingrese pago </h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (!string.IsNullOrEmpty(erroresModal))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <b> Error! </b> @erroresModal
                </div>
            }
            <div class="modal-body">
                <div class="form-row">
                    <div class="form-group col-md-4">
                        <label>Ingrese el pago en $(pesos)</label>
                        <input class="form-control" @bind="pago" type="number" step="0.01" placeholder="Ingrese pago al proveedor en $">
                    </div>

                    <div id="buscador-fpago" class="form-group col-md-5">
                        <label>Forma de pago</label>
                        <BlazoredTypeahead SearchMethod="BuscarFormasPago" @bind-Value="fPagoSeleccionada" placeholder="Seleccione forma de pago" class="form-control">
                            <SelectedTemplate>@context.Descripcion</SelectedTemplate>
                            <ResultTemplate>@context.Descripcion</ResultTemplate>
                        </BlazoredTypeahead>
                    </div>

                    <div class="form-group col-md-3">
                        <label><b>Total = $@compra.Total</b></label>
                        <div>
                            <button class="btn btn-primary" @onclick="AsignarFormasPago"><i class="oi oi-plus"></i> Agregar</button>
                        </div>
                    </div>
                </div>

                @if (compra.FormasPago.Count > 0)
                {
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Fecha</th>
                                <th>Forma de Pago</th>
                                <th>Importe</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @{int contadorFp = 1;}
                            @foreach (var item in compra.FormasPago)
                            {
                                <tr>
                                    <td>@contadorFp</td>
                                    <td>@item.Fecha</td>
                                    <td>@item.FormaPago.Descripcion</td>
                                    <td>$@item.Importe</td>
                                    <td><button type="button" class="btn btn-danger btn-sm" @onclick="() => compra.FormasPago.Remove(item)"><i class="oi oi-trash"></i></button></td>
                                </tr>
                                contadorFp++;
                            }
                        </tbody>
                    </table>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-outline-success" @onclick="@(() => CrearCompra())">Registrar</button>
            </div>
        </div>
    </div>
</div>

@code {

    public CompraModel compra { get; set; } = new CompraModel();

    private ArticuloModel articuloSeleccionado;
    private IEnumerable<ArticuloModel> articulos;

    private ProveedorModel proveedorSeleccionado;
    private IEnumerable<ProveedorModel> proveedores;

    private FormaPagoModel fPagoSeleccionada;
    private IEnumerable<FormaPagoModel> formasPago;

    #region Detalle
    private int cantidad { get; set; }
    private decimal precioMayor { get; set; }
    private decimal precioUnit { get; set; }
    private decimal subtotal { get; set; }
    private decimal pago { get; set; }
    private decimal importeTotal { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        articulos = await ArticuloService.GetAll();
        proveedores = await ProveedorService.GetAll();
        formasPago = await FormasPagoService.GetAll();
        compra.Fecha = DateTime.Now;
    }

    void AgregarArticulo()
    {
        if (articuloSeleccionado != null)
        {
            subtotal = precioMayor * cantidad;
        }
    }

    void AgregarDetalle()
    {
        ValidacionDetalle();
        if (string.IsNullOrEmpty(errores))
        {
            DetalleCompraModel detalle = new();
            detalle.Cantidad = cantidad;
            detalle.Precio_Mayor = precioMayor;
            detalle.Precio_Unit = precioUnit;
            detalle.Articulo_Id = articuloSeleccionado.Id;
            detalle.Articulo = articuloSeleccionado;
            detalle.SubTotal = subtotal;
            compra.Detalle.Add(detalle);
            compra.Total = CalcularTotal();
        }
    }

    void AsignarProveedor()
    {
        if (proveedorSeleccionado != null)
        {
            compra.Proveedor = proveedorSeleccionado;
            compra.Proveedor_Id = proveedorSeleccionado.Id;
        }
    }

    void AsignarFormasPago()
    {
        if (fPagoSeleccionada != null)
        {
            FormaPagoCompraModel fpago = new();
            fpago.FormaPago = fPagoSeleccionada;
            fpago.FormaPago_Id = fPagoSeleccionada.Id;
            fpago.Importe = pago;
            fpago.Fecha = compra.Fecha;
            compra.FormasPago.Add(fpago);
        }
    }

    decimal CalcularTotal()
    {
        compra.Total = 0;
        if (compra.Detalle.Count > 0)
        {
            @for (int i = 0; i < compra.Detalle.Count; i++)
            {
                compra.Total += compra.Detalle[i].SubTotal;
            }
        }
        compra.Total = Convert.ToDecimal(compra.Total);
        return compra.Total;
    }

    void CalcularTotalFormaPago()
    {
        importeTotal = 0;
        if (compra.FormasPago.Count > 0)
        {
            @for (int i = 0; i < compra.FormasPago.Count; i++)
            {
                importeTotal += compra.FormasPago[i].Importe;
            }
        }
    }

    #region Validaciones

    private string errores { get; set; }
    private string erroresModal { get; set; }

    void ValidacionCompra()
    {
        errores = string.Empty;
        if (proveedorSeleccionado == null)
            errores += "Seleccione un proveedor. \r\n";
        if (compra.NroRecibo == 0)
            errores += "Ingrese un Numero de Recibo válido. \r\n";
        if (compra.Detalle.Count == 0)
            errores += "La compra no posee detalles, agregue productos a la lista. \r\n";
    }

    void ValidacionDetalle()
    {
        errores = string.Empty;
        if (articuloSeleccionado == null)
            errores += "Seleccione un producto. \r\n";
        if (precioUnit <= 0)
            errores += "Ingrese un precio unitario válido. Mayor a 0. \r\n";
        if (precioMayor <= 0)
            errores += "Ingrese un precio mayorista válido. Mayor a 0. \r\n";
        if (cantidad <= 0)
            errores += "Ingrese una cantidad válida. Mayor a 0. \r\n";
        if (subtotal < 0)
            errores += "Seleccione un Sub Total válido. \r\n";
    }

    void ValidacionModal()
    {
        erroresModal = string.Empty;
        if (compra.FormasPago.Count == 0)
            erroresModal += "Agregue una forma de pago válida. \r\n";
        if (Math.Truncate(importeTotal) != Math.Truncate(compra.Total))
            erroresModal += "El importe del pago debe ser igual al total. Al proveedor no se le puede deber. \r\n";
    }

    #endregion

    async Task CrearCompra()
    {
        AsignarProveedor();
        CalcularTotal();
        CalcularTotalFormaPago();
        var empleado = await UsuarioService.GetSesion();
        compra.Empleado_Id = empleado.Id;
        compra.Proveedor_Id = proveedorSeleccionado.Id;

        ValidacionModal();

        if (string.IsNullOrEmpty(errores) && string.IsNullOrEmpty(erroresModal))
        {
            var respuesta = await CompraService.Alta(compra);
            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("ocultaModal", "#modalFinalizaCompra");
                NavigationManager.NavigateTo("/compras");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Compra cargada correctamente!", "success");
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo cargar compra.", "error");
        }
    }

    void LevantaModal()
    {
        ValidacionCompra();
        if (string.IsNullOrEmpty(errores))
        {
            JS.InvokeVoidAsync("levantaModal", "#modalFinalizaCompra");
        }
    }


    private async Task<IEnumerable<ArticuloModel>> BuscarArticulos(string busqueda)
    {
        return await Task.FromResult(articulos.Where(x => x.Nombre.ToUpper().Contains(busqueda.ToUpper())));
    }

    private async Task<IEnumerable<ProveedorModel>> BuscarProveedores(string busqueda)
    {
        return await Task.FromResult(proveedores.Where(x => x.Nombre.ToUpper().Contains(busqueda.ToUpper())).ToList());
    }

    private async Task<IEnumerable<FormaPagoModel>> BuscarFormasPago(string busqueda)
    {
        return await Task.FromResult(formasPago.Where(x => x.Descripcion.ToUpper().Contains(busqueda.ToUpper())).ToList());
    }
}