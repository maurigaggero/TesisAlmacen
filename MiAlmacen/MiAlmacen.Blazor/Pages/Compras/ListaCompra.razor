@page "/compras"
@inject CompraService CompraService
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject FormasPagoService FormasPagoService
@inject IJSRuntime JS

<h3>Compras</h3>
<div class="d-flex justify-content-between mb-1" id="header">
    <button class="btn btn-sm btn-secondary" @onclick="LevantaCollapse" type="button" data-toggle="collapse" data-target="#collapseFiltros" role="button" aria-expanded="false" aria-controls="collapseFiltros">
        <i class="oi oi-eye"></i> Mostrar filtros
    </button>
    <div>
        <a href="compras/crear" class="btn btn-sm btn-primary">
            <i class="oi oi-plus"></i> Nueva
        </a>
    </div>
</div>

<div class="collapse" id="collapseFiltros">
    <div class="card card-body">
        <div class="input-group d-flex justify-content-between mb-1" id="filtros">
            <input class="form-control form-control-sm" type="text" placeholder="Buscar por proveedor" @oninput="FiltroProveedor" />
            <input class="form-control form-control-sm" type="text" placeholder="Buscar por empleado" @oninput="FiltroEmpleado" />
        </div>
        <div class="input-group d-flex justify-content-between mb-1" id="filtros2">
            <input class="form-control form-control-sm" type="date" @bind="@FechaDesde" @oninput="FiltroFechaDesde" />
            <input class="form-control form-control-sm" type="date" @bind="@FechaHasta" @oninput="FiltroFechaHasta" />
        </div>
        <div class="btn-group d-flex justify-content-between mb-1" id="filtros3">
            <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, false, false, false))"> Todos</button>
            <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(true, false, false, false))"> Solo activos</button>
            <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, true, false, false))"> Solo inactivos</button>
        </div>
    </div>
</div>

@if (compras == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (compras.Count() == 0)
{
    <div>
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <b> No hay compras registradas.</b> Cargue una haciendo click en el botón "Nueva".
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th>Nro. Recibo</th>
                <th>Fecha</th>
                <th>Proveedor</th>
                <th>Empleado</th>
                <th>Total</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in compras)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.NroRecibo</td>
                    <td>@item.Fecha</td>
                    <td>@item.Proveedor.Nombre</td>
                    <td>@item.Empleado.Nombre</td>
                    <td>$@item.Total</td>
                    <td>
                        @if (item.Fecha_Baja == null)
                        {
                            <i class="oi oi-arrow-thick-top" style="color:green"></i>
                        }
                        else
                        {
                            <i class="oi oi-arrow-thick-bottom" style="color:red"></i>
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary m-1" @onclick="@(() => LevantaModalDetalle(item.Id))" data-toggle="tooltip" data-placement="bottom" title="Ver detalle">
                            <i class="oi oi-eye"></i>
                        </button>
                        @if (item.Fecha_Baja == null)
                        {
                            <button @onclick="@(() => Borrar(item.Id))" class="btn btn-sm btn-outline-danger m-1" data-toggle="tooltip" data-placement="bottom" title="Anular">
                                <i class="oi oi-trash"></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal Detalle -->
@if (compraSeleccionada != null)
{
    <ModalDetalleCompra compraSeleccionada="@compraSeleccionada"></ModalDetalleCompra>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar()">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        <b>@registros registros totales</b>
    </div>
</div>


@code {
    public IEnumerable<CompraModel> compras { get; set; }

    public IEnumerable<CompraModel> comprasTemp { get; set; }

    public CompraModel compraSeleccionada { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    public string empleadoFiltro { get; set; } = string.Empty;

    public string proveedorFiltro { get; set; } = string.Empty;

    public DateTime FechaDesde { get; set; }

    public DateTime FechaHasta { get; set; }

    public bool activos { get; set; } = true; public bool inactivos { get; set; }

    public decimal saldoCompra { get; set; }

    private FormaPagoModel fPagoSeleccionada;
    private IEnumerable<FormaPagoModel> formasPago;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("levantaTooltips");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        FechaDesde = DateTime.Now.AddDays(-15);
        FechaHasta = DateTime.Now.AddDays(1);

        var result = await UsuarioService.GetSesion();
        if (result == null)
            NavigationManager.NavigateTo("/");
        else
        {
            formasPago = await FormasPagoService.GetAll();
            await GetCompras();
            await Paginar();
        }
    }

    private async Task GetCompras()
    {
        compras = await CompraService.GetAll();
        comprasTemp = compras;
    }

    private async Task LevantaModalDetalle(int id)
    {
        compraSeleccionada = await CompraService.GetUn(id);
        await JS.InvokeVoidAsync("levantaModal", "#modalDetalleCompra");
    }

    private async Task LevantaCollapse()
    {
        await JS.InvokeVoidAsync("levantaCollapse", "#collapseFiltros");
    }

    private async Task Borrar(int id)
    {
        var compra = await CompraService.GetUn(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Seguro desea anular la compra seleccionada?", "warning");
        if (confirmacion)
        {
            var respuesta = await CompraService.Eliminar(id);

            if (respuesta.IsSuccessStatusCode)
            {
                var content = await respuesta.Content.ReadAsStringAsync();
                var objDeserealizado = JsonConvert.DeserializeObject<int>(content);
                await JS.InvokeVoidAsync("simple", "¡Éxito!", $"Compra #{objDeserealizado} anulada correctamente", "success");
                await GetCompras();
                await Paginar();
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo anular compra", "error");
        }
    }

    async Task Paginar(bool next = false)
    {
        await Filtrar();
        int cantidadPorPagina = 10;
        decimal total;
        registros = compras.Count();

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        compras = await Task.FromResult(compras.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina));
    }

    async Task Filtrar()
    {
        compras = comprasTemp;

        if (activos)
            compras = await Task.FromResult(compras.Where(x => x.Fecha_Baja == null));
        if (inactivos)
            compras = await Task.FromResult(compras.Where(x => x.Fecha_Baja != null));

        if (!string.IsNullOrEmpty(proveedorFiltro))
            compras = await Task.FromResult(compras.Where(x => x.Proveedor.Nombre.ToUpper().Contains(proveedorFiltro.ToUpper())));
        if (!string.IsNullOrEmpty(empleadoFiltro))
            compras = await Task.FromResult(compras.Where(x => x.Empleado.Nombre.ToUpper().Contains(empleadoFiltro.ToUpper())));

        compras = await Task.FromResult(compras.Where(x => x.Fecha.Date >= FechaDesde.Date));
        compras = await Task.FromResult(compras.Where(x => x.Fecha.Date <= FechaHasta.Date));
    }

    async Task FiltroEmpleado(ChangeEventArgs e)
    {
        empleadoFiltro = e.Value.ToString();
        await Filtrar();
        await Paginar();
    }

    async Task FiltroProveedor(ChangeEventArgs e)
    {
        proveedorFiltro = e.Value.ToString();
        await Filtrar();
        await Paginar();
    }

    async Task Filtros(bool activosB, bool inactivosB, bool sinDeudaB, bool deudaB)
    {
        activos = activosB; inactivos = inactivosB;
        await Filtrar();
        await Paginar();
    }

    async Task FiltroFechaDesde(ChangeEventArgs e)
    {
        FechaDesde = Convert.ToDateTime(e.Value.ToString());
        await Filtrar();
        await Paginar();
    }

    async Task FiltroFechaHasta(ChangeEventArgs e)
    {
        FechaHasta = Convert.ToDateTime(e.Value.ToString());
        await Filtrar();
        await Paginar();
    }

    private async Task<IEnumerable<FormaPagoModel>> BuscarFormasPago(string busqueda)
    {
        return await Task.FromResult(formasPago.Where(x => x.Descripcion.ToUpper().Contains(busqueda.ToUpper())).ToList());
    }

    void AsignarFormasPago()
    {
        if (fPagoSeleccionada != null)
        {
            FormaPagoCompraModel fpago = new();
            fpago.FormaPago = fPagoSeleccionada;
            fpago.FormaPago_Id = fPagoSeleccionada.Id;
            fpago.Importe = saldoCompra;
            fpago.Fecha = DateTime.Now;
            fpago.Compra_Id = compraSeleccionada.Id;
            compraSeleccionada.FormasPago.Add(fpago);
        }
    }

    void QuitaFormasPago(FormaPagoCompraModel formaPagoCompra)
    {
        compraSeleccionada.FormasPago.Remove(formaPagoCompra);
    }
}