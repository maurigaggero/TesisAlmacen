@page "/caja/abrir"
@inject NavigationManager NavigationManager
@inject CajaService CajaService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Abrir Caja</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver atrás
        </button>
    </div>
</div>

<FormCaja caja="@caja" TextBotonSubmit="Confirmar Apertura de Caja" OnValidSubmit="@AbrirCaja" />

@code {
    public CajaModel caja = new CajaModel();

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            caja.Empleado_Id = result.Id;
            caja.Empleado = await UsuarioService.GetUn(caja.Empleado_Id);
        }
    }


    async Task AbrirCaja()
    {
        var respuesta = await CajaService.Alta(caja);

        if (respuesta.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/caja");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", "Caja Abierta", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo abrir la caja.", "error");
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/caja");
    }
}
