@*@page "/movimientos/registrar"
@inject NavigationManager NavigationManager
@inject MovimientoService MovimientoService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Nuevo Movimiento Eventual</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver al listado
        </button>
    </div>
</div>

<FormMovimiento movimiento="@movimiento" TextBotonSubmit="Registrar Movimiento" OnValidSubmit="@CrearMov" />

@code {
    public MovimientosCajaModel movimiento = new MovimientosCajaModel();

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    async Task CrearMov()
    {
        var respuesta = await MovimientoService.Alta(movimiento);

        if (respuesta.IsSuccessStatusCode)
        {
            var content = await respuesta.Content.ReadAsStringAsync();
            NavigationManager.NavigateTo("/movimientos");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El movimiento se registró con éxito", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo crear producto.", "error");
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/movimientos");
    }
}*@

