@*@inject MovimientoService MovimientoSerive
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<EditForm Model="@movimiento" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group row">
        <label class="col-3 col-form-label">Descripción</label>
        <div class="col">
            <div class="input-group">
                <InputText @bind-Value="@movimiento.Descripción" class="form-control" placeholder="Descripción" />
            </div>
            <ValidationMessage For="@(() => movimiento.Descripción)" />
        </div>
    </div>

    <div class="form-group row">
        <label class="col-3 col-form-label">Ingreso de Dinero</label>
        <div class="col">
            <div class="input-group">
                <InputNumber @bind-Value="@movimiento.Ingreso" class="form-control" placeholder="Ingreso" />
            </div>
            <ValidationMessage For="@(() => movimiento.Ingreso)" />
        </div>
    </div>

    <div class="form-group row">
        <label class="col-3 col-form-label">Egreso de Dinero</label>
        <div class="col">
            <div class="input-group">
                <InputNumber @bind-Value="@movimiento.Egreso" class="form-control" placeholder="Egreso" />
            </div>
            <ValidationMessage For="@(() => movimiento.Egreso)" />
        </div>
    </div>

    <button type="submit" class="btn btn-block btn-success">
        <i class="oi oi-check "></i>
        <text style="color:white"> @TextBotonSubmit</text>
    </button>
</EditForm>

@code {
    [Parameter] public MovimientosCajaModel movimiento { get; set; } = new MovimientosCajaModel();
    [Parameter] public string TextBotonSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

}*@