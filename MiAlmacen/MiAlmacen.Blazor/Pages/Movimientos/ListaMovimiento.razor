@page "/movimientos"
@inject MovimientoService MovimientoService
@inject VentaService VentaService
@inject CompraService CompraService
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<h3>Movimientos del día</h3>


@if (movimientos == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (movimientos.Count() == 0)
{
    <div>
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            No se encontraron movimientos de dinero para listar.
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    </div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th>Hora</th>
                <th>Razon Social</th>
                <th>Empleado</th>
                <th>Importe</th>
                <th>Detalle</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var mov in movimientos)
            {
                <tr>
                    <td>@mov.Descripción #@mov.Id</td>
                    <td>@mov.Fecha.ToString("HH:mm")</td>
                    <td>@mov.RazonSocial</td>
                    <td>@mov.Empleado</td>
                    <td>$ @mov.Importe</td>
                    <td>
                        @if (mov.Descripción.Equals("Compra") || mov.Descripción.Equals("Venta"))
                        {
                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => VerDetalle(mov))">
                            <i class="oi oi-eye"></i>
                        </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (compraSeleccionada != null)
{
    <MiAlmacen.Blazor.Pages.Compras.ModalDetalleCompra compraSeleccionada="@compraSeleccionada"></MiAlmacen.Blazor.Pages.Compras.ModalDetalleCompra>
}

@if (ventaSeleccionada != null)
{
    <MiAlmacen.Blazor.Pages.Ventas.ModalDetalleVenta ventaSeleccionada="@ventaSeleccionada"></MiAlmacen.Blazor.Pages.Ventas.ModalDetalleVenta>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        <b>@registros registros totales</b>
    </div>
</div>


@code {
    public IEnumerable<MovimientosCajaModel> movimientos { get; set; }
    public IEnumerable<MovimientosCajaModel> movTemp { get; set; }

    public CompraModel compraSeleccionada { get; set; }
    public VentaModel ventaSeleccionada { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    public bool activos { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await GetMov();
            await Paginar(false);
        }
    }

    private async Task GetMov()
    {
        movimientos = await MovimientoService.GetAll();
        movTemp = movimientos;
    }

    async Task VerDetalle(MovimientosCajaModel movimiento)
    {
        if (movimiento.Descripción.Equals("Venta"))
        {
            ventaSeleccionada = await VentaService.GetUn(movimiento.Id);
            await JS.InvokeVoidAsync("levantaModal", "#modalDetalleVenta");
        }
        if (movimiento.Descripción.Equals("Compra"))
        {
            compraSeleccionada = await CompraService.GetUn(movimiento.Id);
            await JS.InvokeVoidAsync("levantaModal", "#modalDetalleCompra");
        }
    }

    async Task Paginar(bool next = false)
    {
        movimientos = movTemp;

        int cantidadPorPagina = 10;
        decimal total;
        registros = movimientos.Count();

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        movimientos = await Task.FromResult(movimientos.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina));
    }
}