@page "/getcajas"
@inject CajaService CajaService
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JS


<div class="d-flex justify-content-between mb-1" id="header">
    <h3>Registros de Caja</h3>
    <div>
        <div class="btn-group">
            <a href="caja" class="btn btn-sm btn-primary">
                <i class="oi oi-arrow-circle-right"></i> Mostrar Caja del día
            </a>
        </div>
    </div>
</div>


<div class="input-group d-flex justify-content-between mb-1">
    <input class="form-control form-control-sm" type="date" @bind="@FechaFiltro" @oninput="FiltroFecha" />
    <input class="form-control form-control-sm" type="text" placeholder="Buscar por empleado" @oninput="FiltroEmpleado" />
</div>
<div class="input-group d-flex justify-content-between mb-1">
    <button class="btn btn-primary btn-block btn-sm" @onclick="@(() => GetCajas())"> Todas</button>
</div>


@if (cajas == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (cajas.Count() == 0)
{
    <p>No se encontraron cajas para listar.</p>
}
else
{
    <div>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Empleado</th>
                    <th>Monto Apertura</th>
                    <th>Monto Actual</th>
                    <th>Monto Otras Forma de Pago</th>
                    <th>Monto Cuenta Corriente</th>
                    <th>Monto Cierre</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var caja in cajas)
                {
                    <tr>
                        <td>@caja.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@caja.Empleado.Nombre</td>
                        <td>$@caja.Apertura</td>
                        <td>$@caja.Actual</td>
                        <td>$@caja.Otros</td>
                        <td>$@caja.CtaCorriente</td>
                        <td>$@caja.Cierre</td>
                        <td>
                            @if (caja.FechaCierre == null)
                            {
                                <i class="oi oi-arrow-thick-top" style="color:green"></i>
                            }
                            else
                            {
                                <i class="oi oi-arrow-thick-bottom" style="color:red"></i>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        <b>@registros registros totales</b>
    </div>
</div>



@code {
    public IEnumerable<CajaModel> cajas { get; set; }

    public IEnumerable<CajaModel> cajasTemp { get; set; }

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    public string empleadoFiltro { get; set; } = string.Empty;

    public DateTime FechaFiltro { get; set; } = DateTime.Now;


    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await GetCajas();
            await Paginar(false);
        }
    }

    private async Task GetCajas()
    {
        cajas = await CajaService.GetAll();
        cajasTemp = cajas;
    }

    async Task FiltroEmpleado(ChangeEventArgs e)
    {
        empleadoFiltro = e.Value.ToString();
        cajas = await Task.FromResult(cajas.Where(x => x.Empleado.Nombre.ToUpper().Contains(empleadoFiltro.ToUpper())));
        await Paginar(false);
    }


    async Task FiltroFecha(ChangeEventArgs e)
    {
        FechaFiltro = Convert.ToDateTime(e.Value.ToString());
        cajas = await Task.FromResult(cajas.Where(x => x.Fecha.Date == FechaFiltro.Date));
        await Paginar(false);
    }


    async Task Paginar(bool next)
    {

        int cantidadPorPagina = 10;
        registros = cajas.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        cajas = cajas.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }
}

