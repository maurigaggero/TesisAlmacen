@page "/ventas"
@inject VentaService VentaService
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-1" id="header">
    <h3>Ventas</h3>
    <div>
        <a href="ventas/crear" class="btn btn-sm btn-success">
            <i class="oi oi-plus"></i> Nueva
        </a>
    </div>
</div>

<div class="input-group d-flex justify-content-between mb-1" id="filtros">
    <input class="form-control form-control-sm" type="text" placeholder="Buscar por cliente" @oninput="FiltroCliente" />
    <input class="form-control form-control-sm" type="text" placeholder="Buscar por empleado" @oninput="FiltroEmpleado" />
</div>
<div class="input-group d-flex justify-content-between mb-1" id="filtros2">
    <input class="form-control form-control-sm" type="date" @bind="@FechaDesde"  @oninput="FiltroFechaDesde" />
    <input class="form-control form-control-sm" type="date" @bind="@FechaHasta" @oninput="FiltroFechaHasta" />
</div>
<div class="btn-group d-flex justify-content-between mb-1" id="filtros3">
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, false, false, false))"> Todos</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(true, false, false, false))"> Solo activos</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, true, false, false))"> Solo inactivos</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, false, false, true))"> Con deuda</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(true, false, false, true))"> Activos con deuda</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, true, false, true))"> Inactivos con deuda</button>
</div>


@if (ventas == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (ventas.Count() == 0)
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        <b> No hay ventas registradas.</b> Cargue una haciendo click en el botón "Nueva".
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th>Fecha</th>
                <th>Forma de Pago</th>
                <th>Cliente</th>
                <th>Empleado</th>
                <th>Total</th>
                <th>Saldo</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var venta in ventas)
            {
                <tr>
                    <td>@venta.Id</td>
                    <td>@venta.Fecha</td>
                    <td>@venta.FormaPago</td>
                    <td>@venta.Cliente.Nombre</td>
                    <td>@venta.Empleado.Nombre</td>
                    <td>$@venta.Total</td>
                    <td>$@venta.Saldo</td>
                    <td>
                        @if (venta.Fecha_Baja == null)
                        {
                            <i class="oi oi-arrow-thick-top" style="color:green"></i>
                        }
                        else
                        {
                            <i class="oi oi-arrow-thick-bottom" style="color:red"></i>
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-warning m-1" @onclick="@(() => LevantaModalDetalle(venta.Id))" data-toggle="tooltip" data-placement="bottom" title="Ver detalle">
                            <i class="oi oi-eye"></i>
                        </button>
                        @if (venta.Fecha_Baja == null)
                        {
                            <button @onclick="@(() => Borrar(venta.Id))" class="btn btn-sm btn-outline-danger m-1" data-toggle="tooltip" data-placement="bottom" title="Anular">
                                <i class="oi oi-arrow-thick-bottom"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary m-1" @onclick="@(() => LevantaModalSaldo(venta))" data-toggle="tooltip" data-placement="bottom" title="Modificar saldo">
                                <i class="oi oi-pencil"></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal Detalle -->
<div class="modal fade" id="modalDetalle" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalle venta Nro: @idVentaSeleccionada </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Código Articulo</th>
                            <th>Articulo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>SubTotal</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var det in detalle)
                        {
                            <tr>
                                <td>@det.Articulo.Codigo_Art</td>
                                <td>@det.Articulo.Nombre</td>
                                <td>@det.Cantidad</td>
                                <td>$@det.Precio</td>
                                <td>$@det.SubTotal</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal Saldo -->
<div class="modal fade" id="modalSaldo" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title">Modificar saldo venta </h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group form-check m-1">
                    <b>Ingrese el pago del cliente en $ (pesos):</b>
                    <input class="form-control form-control" @bind-value="saldoVenta" type="number" step="0.01" placeholder="Ingrese pago del cliente en $">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-outline-success" @onclick="@(() => ModificarSaldo())">Guardar y actualizar</button>
            </div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar()">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        <b>@registros registros totales</b>
    </div>
</div>


@code {
    public IEnumerable<VentaModel> ventas { get; set; }

    public int idVentaSeleccionada { get; set; }

    public List<DetalleVentaModel> detalle { get; set; } = new List<DetalleVentaModel>();

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    public string empleadoFiltro { get; set; } = string.Empty;

    public string clienteFiltro { get; set; } = string.Empty;

    public DateTime FechaDesde { get; set; }

    public DateTime FechaHasta { get; set; }

    public bool activos { get; set; } = true; public bool inactivos { get; set; }

    public bool deuda { get; set; }
    public bool sindeuda { get; set; }

    public float saldoVenta { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("levantaTooltips");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        FechaDesde = DateTime.Now.AddDays(-15);
        FechaHasta = DateTime.Now.AddDays(1);

        var result = await UsuarioService.GetSesion();
        if (result == null)
            NavigationManager.NavigateTo("/");
        else
            await Paginar();
    }

    private async Task GetVentas()
    {
        ventas = await VentaService.GetAll();
    }

    private async Task LevantaModalSaldo(VentaModel venta)
    {
        saldoVenta = venta.Saldo;
        idVentaSeleccionada = venta.Id;
        await JS.InvokeVoidAsync("levantaModal", "#modalSaldo");
    }

    private async Task LevantaModalDetalle(int id)
    {
        var venta = await VentaService.GetUn(idVentaSeleccionada);
        idVentaSeleccionada = id;
        detalle = venta.Detalle;
        await JS.InvokeVoidAsync("levantaModal", "#modalDetalle");
    }

    private async Task ModificarSaldo()
    {
        var venta = await VentaService.GetUn(idVentaSeleccionada);
        var respuesta = await VentaService.EditarSaldo(venta, saldoVenta);

        if (respuesta.IsSuccessStatusCode)
        {
            var content = await respuesta.Content.ReadAsStringAsync();
            var objDeserealizado = JsonConvert.DeserializeObject<float>(content);
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"Saldo venta actualizado! Nuevo saldo: ${objDeserealizado}", "success");
            await GetVentas();
            await Paginar();
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo actualizar venta", "error");
    }

    private async Task Borrar(int id)
    {
        var venta = await VentaService.GetUn(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Seguro desea anular la venta seleccionada?", "warning");
        if (confirmacion)
        {
            var respuesta = await VentaService.Eliminar(id);

            if (respuesta.IsSuccessStatusCode)
            {
                var content = await respuesta.Content.ReadAsStringAsync();
                var objDeserealizado = JsonConvert.DeserializeObject<int>(content);
                await JS.InvokeVoidAsync("simple", "¡Éxito!", $"Venta #{objDeserealizado} anulada correctamente", "success");
                await GetVentas();
                await Paginar();
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo anular venta", "error");
        }
    }

    async Task Paginar(bool next = false)
    {
        await GetVentas();

        if (activos)
            ventas = await Task.FromResult(ventas.Where(x => x.Fecha_Baja == null));
        if (deuda)
            ventas = await Task.FromResult(ventas.Where(x => x.Saldo > 0));
        if (!string.IsNullOrEmpty(clienteFiltro))
            ventas = await Task.FromResult(ventas.Where(x => x.Cliente.Nombre.ToUpper().Contains(clienteFiltro.ToUpper())));
        if (!string.IsNullOrEmpty(empleadoFiltro))
            ventas = await Task.FromResult(ventas.Where(x => x.Empleado.Nombre.ToUpper().Contains(empleadoFiltro.ToUpper())));

        ventas = await Task.FromResult(ventas.Where(x => x.Fecha > FechaDesde));
        ventas = await Task.FromResult(ventas.Where(x => x.Fecha < FechaHasta));

        int cantidadPorPagina = 10;
        registros = ventas.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        ventas = ventas.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    async Task FiltroEmpleado(ChangeEventArgs e)
    {
        empleadoFiltro = e.Value.ToString();
        await Paginar();
    }

    async Task FiltroCliente(ChangeEventArgs e)
    {
        clienteFiltro = e.Value.ToString();
        await Paginar();
    }

    async Task Filtros(bool activosB, bool inactivosB, bool sinDeudaB, bool deudaB)
    {
        activos = activosB; deuda = deudaB;
        inactivos = inactivosB; sindeuda = sinDeudaB;
        await Paginar();
    }

    async Task FiltroFechaDesde(ChangeEventArgs e)
    {
        FechaDesde = Convert.ToDateTime(e.Value.ToString());
        await Paginar();
    }

    async Task FiltroFechaHasta(ChangeEventArgs e)
    {
        FechaHasta = Convert.ToDateTime(e.Value.ToString());
        await Paginar();
    }
}