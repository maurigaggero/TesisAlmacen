@inject NavigationManager NavigationManager
@inject VentaService VentaService
@inject ArticuloService ArticuloService
@inject ClienteService ClienteService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS


@if (!string.IsNullOrEmpty(errores))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" id="validaciones">
        <b> Error! </b> @errores
    </div>
}

<div id="header" class="form-row">
    <div class="form-group col-md-6">
        <label>Fecha</label>
        <input type="date" @bind="@venta.Fecha" class="form-control" />
    </div>

    <div id="buscador-clientes" class="form-group col-md-6">
        <label>Cliente</label>
        <BlazoredTypeahead SearchMethod="BuscarClientes" @bind-Value="clienteSeleccionado" placeholder="Seleccione cliente" class="form-control">
            <SelectedTemplate>@context.Nombre | @context.DNI</SelectedTemplate>
            <ResultTemplate>@context.Nombre | @context.DNI</ResultTemplate>
        </BlazoredTypeahead>
    </div>
</div>

<hr />

<div class="mb-1" id="detalle">
    <div class="form-row p-2">
        <div id="buscador-articulos" class="form-group col-md-3">
            <label>Producto</label>
            <BlazoredTypeahead SearchMethod="BuscarArticulos" @bind-Value="articuloSeleccionado" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Seleccione producto" class="form-control">
                <SelectedTemplate>@context.Nombre | @context.Codigo_Art | @context.Stock_Act</SelectedTemplate>
                <ResultTemplate>@context.Nombre | @context.Codigo_Art | @context.Stock_Act</ResultTemplate>
            </BlazoredTypeahead>
        </div>

        <div class="form-group col-md-3">
            <label>Cantidad</label>
            <input type="number" @bind="@cantidad" class="form-control" @onfocusout="AgregarArticulo" @onfocusin="AgregarArticulo" placeholder="Ingrese cantidad" />
        </div>

        <div class="form-group col-md-3">
            <label>Precio</label>
            <input type="number" @bind="precio" class="form-control" placeholder="Ingrese precio" readonly="readonly" />
        </div>

        <div class="form-group col-md-3">
            <label>SubTotal</label>
            <input type="number" @bind="subtotal" class="form-control" placeholder="Subtotal" />
        </div>
    </div>


    @if (venta.Detalle.Count == 0)
    {
        <div class="row">
            <div class="col-md-9">
                <div class="alert alert-warning alert-dismissible fade show" role="alert">
                    <b> No hay productos cargados en la compra,</b> agregue un nuevo detalle.
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>

            <div class="col-md-3">
                <div class="d-flex justify-content-end">
                    <button type="button" class="btn btn-success" @onclick="AgregarDetalle">
                        <i class="oi oi-plus"></i> Agregar Detalle
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-success" @onclick="AgregarDetalle">
                <i class="oi oi-plus"></i> Agregar Detalle
            </button>
        </div>
    }
</div>


@if (venta.Detalle.Count > 0)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th> </th>
                <th>Articulo</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in venta.Detalle)
            {
                <tr>
                    <td>#</td>
                    <td>@item.Articulo.Nombre</td>
                    <td>$@item.Precio</td>
                    <td>@item.Cantidad</td>
                    <td>$@item.SubTotal</td>
                    <td><button type="button" class="btn btn-danger btn-sm" @onclick="() => venta.Detalle.Remove(item)"><i class="oi oi-trash"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}


<div class="d-flex justify-content-end py-2">
    <button @onclick="@(() => CalcularTotal())" type="button" class="btn btn-outline-dark" style="border:none">
        <h4><b>TOTAL</b></h4>
        @if (venta.Total != 0)
        {
            <h3><b>$@venta.Total</b></h3>
        }
    </button>
</div>

<button type="submit" class="btn btn-block btn-success" @onclick="LevantaModal">
    <i class="oi oi-check"></i> Finalizar Venta
</button>

<!-- Modal Saldo y Forma Pago -->
<div class="modal fade" id="modalFinalizaVenta" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title">Ingrese pago </h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @if (!string.IsNullOrEmpty(erroresModal))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <b> Error! </b> @erroresModal
                </div>
            }
            <div class="modal-body form-row">
                <div class="form-group col-md-6">
                    <label>Ingrese el pago del cliente en $(pesos)</label>
                    <input class="form-control form-control" @bind="pago" type="number" step="0.01" placeholder="Ingrese pago del cliente en $">
                </div>

                <div class="form-group col-md-6">
                    <label>Forma de pago</label>
                    <select @bind="@venta.FormaPago" class="form-control">
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta de crédito">Tarjeta de crédito</option>
                        <option value="Tarjeta de débito">Tarjeta de débito</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-outline-success" @onclick="@(() => CrearVenta())">Registrar</button>
            </div>
        </div>
    </div>
</div>

@code {

    public VentaModel venta { get; set; } = new VentaModel();

    private ArticuloModel articuloSeleccionado;
    private IEnumerable<ArticuloModel> articulos;

    private ClienteModel clienteSeleccionado;
    private IEnumerable<ClienteModel> clientes;

    #region Detalle
    private int cantidad { get; set; } = 1;
    private float precio { get; set; }
    private float subtotal { get; set; }
    private float pago { get; set; }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        articulos = await ArticuloService.GetAll();
        clientes = await ClienteService.GetAllClientes();
        venta.FormaPago = "Efectivo";
        venta.Fecha = DateTime.Now;
    }

    void AgregarArticulo()
    {
        if (articuloSeleccionado != null)
        {
            precio = articuloSeleccionado.Precio_Unit;
            subtotal = precio * cantidad;
        }
    }

    void AgregarDetalle()
    {
        ValidacionDetalle();
        if (string.IsNullOrEmpty(errores))
        {
            DetalleVentaModel detalle = new();
            detalle.Cantidad = cantidad;
            detalle.Precio = precio;
            detalle.Articulo_Id = articuloSeleccionado.Id;
            detalle.Articulo = articuloSeleccionado;
            detalle.SubTotal = subtotal;
            venta.Detalle.Add(detalle);
            venta.Total = CalcularTotal();
        }
    }

    void AsignarCliente()
    {
        if (clienteSeleccionado != null)
        {
            venta.Cliente = clienteSeleccionado;
            venta.Cliente_Id = clienteSeleccionado.Id;
        }
    }

    float CalcularTotal()
    {
        venta.Total = 0;
        if (venta.Detalle.Count > 0)
        {
            @for (int i = 0; i < venta.Detalle.Count; i++)
            {
                venta.Total += venta.Detalle[i].SubTotal;
            }
        }
        return venta.Total;
    }

    #region Validaciones

    private string errores { get; set; }
    private string erroresModal { get; set; }

    void ValidacionVenta()
    {
        errores = string.Empty;
        if (clienteSeleccionado == null)
            errores += "Seleccione un cliente. \r\n";
        if (venta.Detalle.Count == 0)
            errores += "La venta no posee detalles, agregue productos a la lista. \r\n";
    }

    void ValidacionDetalle()
    {
        errores = string.Empty;
        if (articuloSeleccionado == null)
            errores += "Seleccione un producto. \r\n";
        if (cantidad < 0)
            errores += "Ingrese una cantidad válida. Igual o mayor a 0. \r\n";
        if (subtotal < 0)
            errores += "Seleccione un Sub Total válido. \r\n";
    }

    void ValidacionModal()
    {
        erroresModal = string.Empty;
        if (venta.FormaPago == null)
            erroresModal += "Ingrese una forma de pago válida. \r\n";
        if (pago < 0)
            erroresModal += "El pago debe ser mayor o igual a 0. \r\n";
    }

    #endregion

    async Task CrearVenta()
    {
        AsignarCliente();
        CalcularTotal();
        var empleado = await UsuarioService.GetSesion();
        venta.Saldo = venta.Total - pago;
        venta.Empleado_Id = empleado.Id;
        venta.Cliente_Id = clienteSeleccionado.Id;

        ValidacionModal();

        if (string.IsNullOrEmpty(errores) && string.IsNullOrEmpty(erroresModal))
        {
            var respuesta = await VentaService.Alta(venta);
            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("ocultaModal", "#modalFinalizaVenta");
                NavigationManager.NavigateTo("/ventas");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Venta cargada correctamente!", "success");
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo cargar venta.", "error");
        }
    }

    void LevantaModal()
    {
        ValidacionVenta();
        if (string.IsNullOrEmpty(errores))
        {
            JS.InvokeVoidAsync("levantaModal", "#modalFinalizaVenta");
        }
    }


    private async Task<IEnumerable<ArticuloModel>> BuscarArticulos(string busqueda)
    {
        return await Task.FromResult(articulos.Where(x => x.Nombre.ToUpper().Contains(busqueda.ToUpper())));
    }

    private async Task<IEnumerable<ClienteModel>> BuscarClientes(string busqueda)
    {
        return await Task.FromResult(clientes.Where(x => x.Nombre.ToUpper().Contains(busqueda.ToUpper())).ToList());
    }
}
