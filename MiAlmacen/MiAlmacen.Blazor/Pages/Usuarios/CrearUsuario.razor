@page "/usuarios/registrar"
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Registrarse</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Ya tengo cuenta
        </button>
    </div>
</div>


<FormUsuario usuario="usuario" TextBotonSubmit="Crear usuario" OnValidSubmit="@CrearUser" />

@code {
    public UsuarioModel usuario = new UsuarioModel();

    async Task CrearUser()
    {
        var username = await UsuarioService.GetUser(usuario.Usuario);
        if (username.Usuario != null)
        {
            await JS.InvokeVoidAsync("simple", "Error", "El nombre de usuario ya está en uso. Por favor elija otro.", "error");
        }
        else
        {
            var respuesta = await UsuarioService.Alta(usuario);

            if (respuesta.IsSuccessStatusCode)
            {
                var content = await respuesta.Content.ReadAsStringAsync();
                var objDeserealizado = JsonConvert.DeserializeObject<UsuarioModel>(content);
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El usuario {objDeserealizado.Nombre} fue creado", "success");
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo crear usuario.", "error");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/");
    }
}