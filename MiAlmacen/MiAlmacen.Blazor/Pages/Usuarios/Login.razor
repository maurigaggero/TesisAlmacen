@page "/login"
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="card">
    <h4 class="card-header">Iniciá sesión para continuar</h4>
    <div class="card-body">
        <EditForm Model="@usuario" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Nombre de Usuario</label>
                <InputText @bind-Value="usuario.Usuario" class="form-control" />
                <ValidationMessage For="@(() => usuario.Usuario)" />
            </div>

            <div class="form-group">
                <label>Contraseña</label>
                <InputText @bind-Value="usuario.Contraseña" type="password" class="form-control" />
                <ValidationMessage For="@(() => usuario.Contraseña)" />
            </div>

            <button class="btn btn-success" type="submit"> Iniciar Sesión</button>
            <NavLink href="usuarios/registrar" class="btn btn-link">Registrarme</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel usuario = new LoginModel();

    async Task OnValidSubmit()
    {
        var id = await UsuarioService.Login(usuario.Usuario, usuario.Contraseña);
        if (id == 0)
        {
            await JS.InvokeVoidAsync("simple", "Error", $"Datos incorrectos.", "error");
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

//TODO: obtener usuario logueado
}