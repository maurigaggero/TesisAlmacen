@page "/clientes/crear"
@inject NavigationManager NavigationManager
@inject ClienteService ClienteService
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <h3><b>Nuevo cliente</b></h3>
    </div>
    <div>
        <button @onclick="@Volver" class="btn btn-sm btn-secondary">
            <i class="oi oi-arrow-circle-left"></i> Volver al listado
        </button>
    </div>
</div>

<div class="card m-1">
    <div class="card-body">
        <FormCliente cliente="@cliente" TextBotonSubmit="Crear cliente" OnValidSubmit="@CrearClient" OcultaAlta=true />
    </div>
</div>

@code {
    public ClienteModel cliente = new ClienteModel();

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    async Task CrearClient()
    {
        var existeCliente = await ClienteService.ExisteCliente(cliente.DNI);

        if (existeCliente)
            await JS.InvokeVoidAsync("simple", "Error", $"No se pudo cargar el cliente. El número de DNI ya se encuentra asociado a un Cliente.", "error");
        else
        {
            var respuesta = await ClienteService.Alta(cliente);

            if (respuesta.IsSuccessStatusCode)
            {
                var content = await respuesta.Content.ReadAsStringAsync();
                var objDeserealizado = JsonConvert.DeserializeObject<ClienteModel>(content);
                NavigationManager.NavigateTo("/clientes");
                await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El cliente {objDeserealizado.Nombre} fue creado con éxito", "success");
            }
            else
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo crear cliente.", "error");
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/clientes");
    }
}
