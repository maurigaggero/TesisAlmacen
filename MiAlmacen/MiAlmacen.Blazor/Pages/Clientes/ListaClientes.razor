@page "/clientes"
@using MiAlmacen.Blazor.Services
@using MiAlmacen.Model.Models
@inject IClienteService ClienteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-3">
    <div>
        <a href="clientes/crear" class="btn btn-sm btn-success">
            <i class="oi oi-plus"></i> Nuevo
        </a>
    </div>
    <h3>Clientes</h3>
</div>

@if (clientes == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (clientes.Count() == 0)
{
    <p>No se encontraron clientes.</p>
}
else
{
    <table class="table table-hover">
        <thead class="thead thead-dark">
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Dirección</th>
                <th>Teléfono</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes)
            {
                <tr>

                    <td>@cliente.Id</td>

                    <td>@cliente.Nombre</td>

                    <td>@cliente.Direccion</td>

                    <td>@cliente.Telefono</td>
                    <td>
                        <button @onclick="@(() => BorrarCliente(cliente.Id))" class="btn btn-sm btn-danger">
                            <i class="oi oi-trash"></i>
                        </button>
                        <a class="btn btn-sm btn-warning" href="clientes/editar/@cliente.Id"><i class="oi oi-pencil"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    public IEnumerable<ClienteModel> clientes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        clientes = await ClienteService.GetAllClientes();
    }

    private async Task BorrarCliente(int id)
    {
        var cliente = ClienteService.GetUnCliente(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar cliente?", "warning");
        if (confirmacion)
        {
            var respuesta = ClienteService.Eliminar(id);;

            if (!respuesta.Equals(0))
            {
                NavigationManager.NavigateTo("/clientes", true);
                await JS.InvokeVoidAsync("simple", "¡Éxito!",
                "Cliente eliminado", "success");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    "No se pudo eliminar cliente", "error");
            }
        }
       
    }
}