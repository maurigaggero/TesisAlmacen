@page "/estadisticas"
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject EstadisticaService EstadisticaService
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.PieChart

<h1>Estadisticas</h1>

@if (_clientesConfig == null && _productosConfig == null && _balanceConfig == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else
{
    <style>
        .zoom {
            border-radius: 1rem;
            transition: transform .2s
        }

            .zoom:hover {
                transform: scale(1.02);
                box-shadow: 1px 8px 20px grey;
                -webkit-transition: box-shadow .6s ease-in;
            }
    </style>

    <div class="row h-50">
        <div class="col-6">
            <div class="card zoom m-2">
                <Chart Config="_clientesConfig"></Chart>
            </div>
        </div>
        <div class="col-6">
            <div class="card zoom m-2">
                <Chart Config="_productosConfig"></Chart>
            </div>
        </div>
    </div>
    <div class="row h-50">
        <div class="col-6">
            <div class="card zoom m-2">
                <Chart Config="_balanceConfig"></Chart>
            </div>
        </div>
        <div class="col-6">
            <div class="card zoom m-2">
                <Chart Config="_diasConfig"></Chart>
            </div>
        </div>
    </div>
}

@code{
    private IEnumerable<PeriodoModel> compras { get; set; }
    private IEnumerable<PeriodoModel> ventas { get; set; }
    private IEnumerable<TopModel> clientes { get; set; }
    private IEnumerable<TopModel> productos { get; set; }
    private IEnumerable<PeriodoModel> ventasXdia { get; set; }

    private BarConfig _productosConfig;
    private BarConfig _clientesConfig;
    private LineConfig _balanceConfig;
    private PieConfig _diasConfig;

    protected override async Task OnInitializedAsync()
    {
        var result = UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            productos = await EstadisticaService.GetTopProductos();
            clientes = await EstadisticaService.GetTopClientes();
            compras = await EstadisticaService.GetComprasXPeriodo();
            ventas = await EstadisticaService.GetVentasXPeriodo();
            ventasXdia = await EstadisticaService.GetVentasXDia();

            ConfigurarCharts();
        }
    }

    void ConfigurarCharts()
    {
        #region Productos
        _productosConfig = new BarConfig(horizontal: true)
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Top 5 Productos más vendidos"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                            }
                        }
                    }
                }
            }
        };


        foreach (var producto in productos)
        {
            _productosConfig.Data.Labels.Add(producto.Clave);
        }

        List<int> productosCantidad = new List<int>();

        foreach (var item in productos)
        {
            productosCantidad.Add(item.Valor);
        }

        BarDataset<int> dsProductos = new BarDataset<int>(productosCantidad, horizontal: true)
        {
            BackgroundColor = new[]
            {
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
            }
        };

        _productosConfig.Data.Datasets.Add(dsProductos);

        #endregion

        #region Clientes

        _clientesConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Top 5 Clientes"
                },
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                            }
                        }
                    }
                }
            }
        };

        foreach (var cliente in clientes)
        {
            _clientesConfig.Data.Labels.Add(cliente.Clave);
        }

        List<int> clientesCantidad = new List<int>();

        foreach (var item in clientes)
        {
            clientesCantidad.Add(item.Valor);
        }

        BarDataset<int> dsClientes = new BarDataset<int>(clientesCantidad)
        {
            BackgroundColor = new[]
            {
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
                ColorUtil.RandomColorString(),
            }
        };

        _clientesConfig.Data.Datasets.Add(dsClientes);

        #endregion

        #region Balance

        _balanceConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Ventas x Compras"
                }
            }
        };

        foreach (var periodo in ventas)
        {
            _balanceConfig.Data.XLabels.Add(periodo.Mes);
        }

        List<decimal> montosVentas = new List<decimal>();

        foreach (var item in ventas)
        {
            montosVentas.Add(item.Monto);
        }

        LineDataset<decimal> dsVentas = new LineDataset<decimal>(montosVentas)
        {
            BorderColor = ColorUtil.RandomColorString()
        };

        List<decimal> montosCompras = new List<decimal>();

        foreach (var item in compras)
        {
            montosCompras.Add(item.Monto);
        }

        LineDataset<decimal> dsCompras = new LineDataset<decimal>(montosCompras)
        {
            BorderColor = ColorUtil.RandomColorString()
        };


        _balanceConfig.Data.Datasets.Add(dsCompras);
        _balanceConfig.Data.Datasets.Add(dsVentas);


        _diasConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Ventas x Día"
                }
            }
        };

        foreach (var venta in ventasXdia)
        {
            _diasConfig.Data.Labels.Add(venta.Mes);
        }

        List<decimal> diasMonto = new List<decimal>();

        foreach (var item in ventasXdia)
        {
            diasMonto.Add(item.Monto);
        }

        PieDataset<decimal> dsDias = new PieDataset<decimal>(diasMonto)
        {
            BackgroundColor = new[]
            {
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            ColorUtil.RandomColorString(),
            }
        };

        _diasConfig.Data.Datasets.Add(dsDias);

        #endregion
    }
}