@page "/proveedores"
@inject ProveedorService ProveedorService
@inject NavigationManager NavigationManager
@inject UsuarioService UsuarioService
@inject IJSRuntime JS

<div class="d-flex justify-content-between mb-1" id="header">
    <h3>Proveedores</h3>
    <div>
        <a href="proveedores/crear" class="btn btn-sm btn-success">
            <i class="oi oi-plus"></i> Nuevo
        </a>
    </div>
</div>

<div class="input-group d-flex justify-content-between mb-1" id="filtros">
    <input class="form-control form-control-sm" type="text" placeholder="Busque por nombre" @oninput="FiltroNombre" />
    <input class="form-control form-control-sm" type="text" placeholder="Busque por CUIL" @oninput="FiltroCUIL" />
</div>
<div class="btn-group d-flex justify-content-between mb-1" id="filtros3">
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, false))"> Todos</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(true, false))"> Solo activos</button>
    <button class="btn btn-primary btn-sm" @onclick="@(() => Filtros(false, true))"> Solo inactivos</button>
</div>

@if (proveedores == null)
{
    <div class="vh-100 row m-0 text-center align-items-center justify-content-center">
        <div class="spinner-grow text-primary" role="status">
            <span class="sr-only">Cargando...</span>
        </div>
    </div>
}
else if (proveedores.Count() == 0)
{
    <p>No se encontraron proveedores.</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>CUIL</th>
                <th>Dirección</th>
                <th>Teléfono</th>
                <th>Activo</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proveedor in proveedores)
            {
                <tr>
                    <td>@proveedor.Nombre</td>
                    <td>@proveedor.CUIL</td>
                    <td>@proveedor.Direccion</td>
                    <td>@proveedor.Telefono</td>
                    <td>
                        @if (proveedor.FechaBaja == null)
                        {
                            <i class="oi oi-check" style="color:green"></i>
                        }
                        else
                        {
                            <i class="oi oi-x" style="color:red"></i>
                        }
                    </td>
                    <td>
                        <button @onclick="@(() => BorrarProv(proveedor.Id))" class="btn btn-sm btn-danger">
                            <i class="oi oi-trash"></i>
                        </button>
                        <a class="btn btn-sm btn-warning" href="proveedores/editar/@proveedor.Id"><i class="oi oi-pencil"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-between mb-1" id="footer">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(false)">Anterior</button></li>
            <li class="page-item"><button class="page-link">@pagina</button></li>
            <li class="page-item"><button class="page-link" @onclick="() => Paginar(true)">Siguiente</button></li>
        </ul>
    </nav>
    <div>
        <b>@registros registros totales</b>
    </div>
</div>


@code {
    public IEnumerable<ProveedorModel> proveedores { get; set; }
    public IEnumerable<ProveedorModel> proveedoresTemp { get; set; }

    public string nombreFiltro { get; set; } = string.Empty;

    public string cuilFiltro { get; set; } = string.Empty;

    public int pagina { get; set; } = 1;

    public int registros { get; set; }

    public bool activos { get; set; } = true;

    public bool inactivos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await UsuarioService.GetSesion();
        if (result == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await GetProveedores();
            await Paginar(false);
        }
    }

    private async Task BorrarProv(int id)
    {
        var cliente = await ProveedorService.GetUn(id);

        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar proveedor?", "warning");
        if (confirmacion)
        {
            var respuesta = await ProveedorService.Eliminar(id);

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!", "Proveedor eliminado", "success");
                await GetProveedores();
                await Paginar(false);
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo eliminar proveedor", "error");
            }
        }
    }

    private async Task GetProveedores()
    {
        proveedores = await ProveedorService.GetAll();
        proveedoresTemp = proveedores;
    }

    async Task Paginar(bool next)
    {
        await Filtrar();

        int cantidadPorPagina = 10;
        registros = proveedores.Count();
        decimal total;

        if (registros < cantidadPorPagina)
            total = pagina;
        else
        {
            if (registros % cantidadPorPagina == 0)
                total = registros / cantidadPorPagina;
            else
                total = (registros / cantidadPorPagina) + 1;
        }

        if (!next && pagina > 1) pagina--;

        if (next && pagina < total) pagina++;

        proveedores = proveedores.Skip((pagina - 1) * cantidadPorPagina).Take(cantidadPorPagina);
    }

    async Task Filtrar()
    {
        proveedores = proveedoresTemp;

        if (activos)
            proveedores = await Task.FromResult(proveedores.Where(x => x.FechaBaja == null));
        if (inactivos)
            proveedores = await Task.FromResult(proveedores.Where(x => x.FechaBaja != null));

        if (!string.IsNullOrEmpty(nombreFiltro))
            proveedores = await Task.FromResult(proveedores.Where(x => x.Nombre.ToUpper().Contains(nombreFiltro.ToUpper())));
        if (!string.IsNullOrEmpty(cuilFiltro))
            proveedores = await Task.FromResult(proveedores.Where(x => x.CUIL.ToString().ToUpper().Contains(cuilFiltro.ToUpper())));
    }

    void FiltroNombre(ChangeEventArgs e)
    {
        nombreFiltro = e.Value.ToString();
        Filtrar();
    }

    void FiltroCUIL(ChangeEventArgs e)
    {
        cuilFiltro = e.Value.ToString();
        Filtrar();
    }

    async Task Filtros(bool activosB, bool inactivosB)
    {
        activos = activosB; inactivos = inactivosB;
        await Filtrar();
        await Paginar(false);
    }
}