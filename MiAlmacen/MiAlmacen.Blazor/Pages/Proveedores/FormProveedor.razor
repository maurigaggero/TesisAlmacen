@inject NavigationManager NavigationManager
@inject ProveedorService ProveedorService
@inject IJSRuntime JS

<EditForm Model="@proveedor" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-field mt-2 mb-2">
        <div class="form-group row">
            <label class="col-3 col-form-label">Nombre Completo</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@proveedor.Nombre" class="form-control" placeholder="Nombre" />
                </div>
                <ValidationMessage For="@(() => proveedor.Nombre)" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">CUIL</label>
            <div class="col">
                <div class="input-group">
                    <InputNumber @bind-Value="@proveedor.CUIL" class="form-control" placeholder="Cuil-Cuit" />
                </div>
                <ValidationMessage For="@(() => proveedor.CUIL)" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Dirección</label>
            <div class="col">
                <div class="input-group">
                    <InputText @bind-Value="@proveedor.Direccion" class="form-control" placeholder="Direccion" />
                </div>
                <ValidationMessage For="@(() => proveedor.Direccion)" />
            </div>
        </div>

        <div class="form-group row">
            <label class="col-3 col-form-label">Teléfono</label>
            <div class="col">
                <div class="input-group">
                    <InputNumber @bind-Value="@proveedor.Telefono" class="form-control" placeholder="Telefono" />
                </div>
                <ValidationMessage For="@(() => proveedor.Telefono)" />
            </div>
        </div>

        @if (!OcultaAlta)
        {
            <div class="d-flex justify-content-between form-group row">
                <label class="col-3 col-form-label">Estado</label>
                <div class="col">
                    @if (proveedor.FechaBaja == null)
                    {
                        <label><b>Proveedor activo</b><i class="oi oi-check" style="color:green"></i></label>
                    }
                    else
                    {
                        <label><b>Proveedor dado de baja el: @proveedor.FechaBaja.ToString()</b></label>
                        <div class="btn btn-group">
                            <button type="button" @onclick="DarAlta" class="btn btn-sm btn-primary"><i class="oi oi-data-transfer-upload"></i>Dar de alta</button>
                        </div>
                    }
                </div>
            </div>
        }

        <button type="submit" class="btn btn-primary">
            <i class="oi oi-check "></i>
            <text style="color:white"> @TextBotonSubmit</text>
        </button>
    </div>
</EditForm>


@code {
    [Parameter] public ProveedorModel proveedor { get; set; } = new ProveedorModel();
    [Parameter] public string TextBotonSubmit { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool OcultaAlta { get; set; }


    async void DarAlta()
    {
        proveedor.FechaBaja = null;

        var respuesta = await ProveedorService.Editar(proveedor);

        if (respuesta.IsSuccessStatusCode)
        {
            var content = await respuesta.Content.ReadAsStringAsync();
            var objDeserealizado = JsonConvert.DeserializeObject<ProveedorModel>(content);
            NavigationManager.NavigateTo("/proveedores");
            await JS.InvokeVoidAsync("simple", "¡Éxito!", $"El proveedor {objDeserealizado.Nombre} fue dado de alta con éxito!", "success");
        }
        else
            await JS.InvokeVoidAsync("simple", "Error", $"Error {((decimal)respuesta.StatusCode)}. No se pudo dar de alta el proveedor.", "error");
    }

}
