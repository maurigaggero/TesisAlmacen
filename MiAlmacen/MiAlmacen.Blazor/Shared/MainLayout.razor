@inherits LayoutComponentBase
@inject UsuarioService UsuarioService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            @if (usuariolog != null)
            {
                <button class="btn btn-sm btn-outline-danger"> Hola, @usuariolog.Nombre ! </button>
                <button class="btn btn-sm btn-outline-danger" @onclick="Logout"> Cerrar Sesión</button>
            }
            else
            {
                <button class="btn btn-sm btn-outline-primary" @onclick="LevantaModal"> Iniciar Sesión</button>
            }
        </div>
        <div class="content px-4">
            @Body
            <!-- Modal Login -->
            <div class="modal fade" id="modal-login" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="card">
                                <h4 class="card-header">Iniciá sesión para continuar</h4>
                                <div class="card-body">
                                    <EditForm Model="@usuario" OnValidSubmit="OnValidSubmit">
                                        <DataAnnotationsValidator />
                                        <div class="form-group">
                                            <label>Nombre de Usuario</label>
                                            <InputText @bind-Value="usuario.Usuario" class="form-control" />
                                            <ValidationMessage For="@(() => usuario.Usuario)" />
                                        </div>

                                        <div class="form-group">
                                            <label>Contraseña</label>
                                            <InputText @bind-Value="usuario.Contraseña" type="password" class="form-control" />
                                            <ValidationMessage For="@(() => usuario.Contraseña)" />
                                        </div>

                                        <button class="btn btn-success" type="submit"> Iniciar Sesión</button>
                                        <NavLink href="usuarios/registrar" @onclick="OcultaModal" class="btn btn-link">Registrarme</NavLink>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private string token { get; set; }
    private LoginModel usuario = new LoginModel();
    private UsuarioModel usuariolog { get; set; }


    async Task OnValidSubmit()
    {
        var id = await UsuarioService.Login(usuario.Usuario, usuario.Contraseña);
        if (id == 0)
        {
            await JS.InvokeVoidAsync("simple", "Error", $"El usuario y/o contraseña son inválidos.", "error");
        }
        else
        {
            usuariolog = await UsuarioService.SetUsuarioLog(id);
            OcultaModal();
            NavigationManager.NavigateTo("/");
        }
    }

    private async void Logout()
    {
        await UsuarioService.Logout();
        usuariolog = null;
        LevantaModal();
    }

    void LevantaModal()
    {
        JS.InvokeVoidAsync("levantaModal", "#modal-login");
    }

    void OcultaModal()
    {
        JS.InvokeVoidAsync("ocultaModal", "#modal-login");
    }
}